DRY - Don't repeat yourself - не повторяйся

SSOT - single source of truth (это принцип, заключающийся в создании и использовании единственного источника истины
для определенных данных или информации в организации или системе. Это означает, что все данные, связанные с
конкретным аспектом или предметом, хранятся и обновляются только в одном месте, и все остальные системы и приложения
обращаются к этому источнику, чтобы получить актуальные и точные данные.)

KISS - Keep it simple, stupid
       Keep it stupid simple

SOLID
- single responsibility principle (SRP)
- open-close principle
- Liskov substitution principle (LSP)
- interface segregation principle
- dependency inversion principle

YAGNI (You Aren't Gonna Need It) - это принцип разработки программного обеспечения, который подразумевает, что не
следует реализовывать функциональность, которая не требуется непосредственно в текущем контексте разработки.
Он призывает к избеганию создания излишнего кода, функций или компонентов, которые не используются или не требуются
в текущем состоянии проекта.

*NIX - системы

SOLID - это аббревиатура, которая представляет собой набор пяти основных принципов объектно-ориентированного
программирования и дизайна программного обеспечения. Эти принципы были сформулированы в начале 2000-х годов Робертом
Мартином (также известным как Uncle Bob) и являются руководством для создания гибких, расширяемых и удобочитаемых систем.

Вот расшифровка каждого из принципов SOLID:

Single Responsibility Principle (Принцип единственной ответственности):
Каждый класс или модуль должен быть ответственным только за одну задачу или функциональность. Это означает, что класс
должен иметь только одну причину для изменения, чтобы обеспечить легкость поддержки и повторное использование кода.

Open-Closed Principle (Принцип открытости/закрытости):
Классы и модули должны быть открыты для расширения, но закрыты для модификации. Это означает, что поведение класса
должно быть изменяемым путем расширения через наследование или интерфейсы, но не путем изменения его существующего кода.

Liskov Substitution Principle (Принцип подстановки Лисков):
Подтипы должны быть заменяемы своими базовыми типами без изменения правильности программы. Это означает, что объекты,
которые используют базовый тип, должны безопасно работать с объектами подтипов, не зная о конкретном типе объекта.

Interface Segregation Principle (Принцип разделения интерфейсов):
Клиенты не должны зависеть от интерфейсов, которые они не используют. Это означает, что интерфейсы должны быть
маленькими, специфичными и разделенными, чтобы клиенты могли реализовывать только необходимые методы, а не принимать
на себя ненужные зависимости.

Dependency Inversion Principle (Принцип инверсии зависимостей):
Классы должны зависеть от абстракций, а не от конкретных реализаций. Это означает, что высокоуровневые модули должны
зависеть от абстракций, а не от низкоуровневых модулей. Это позволяет легко внедрять зависимости, упрощать тестирование
и создавать слабосвязанные системы.

